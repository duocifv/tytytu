"""
X·ª≠ l√Ω tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng Telegram.
"""
import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from flows import process_message_flow

# C·∫•u h√¨nh logging
logger = logging.getLogger(__name__)

class MessageHandler:
    """X·ª≠ l√Ω tin nh·∫Øn ƒë·∫øn t·ª´ ng∆∞·ªùi d√πng Telegram."""
    
    def __init__(self):
        """Kh·ªüi t·∫°o tr√¨nh x·ª≠ l√Ω tin nh·∫Øn v·ªõi c√°c phi√™n ng∆∞·ªùi d√πng."""
        self.user_sessions: Dict[int, Dict[str, Any]] = {}
        
    async def handle_start(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """X·ª≠ l√Ω l·ªánh /start t·ª´ ng∆∞·ªùi d√πng."""
        user = update.effective_user
        chat_id = update.effective_chat.id   # üëâ ƒê√¢y l√† chat_id
        welcome_message = (
            f"üëã Xin ch√†o {user.first_name}!\n\n"
            "ü§ñ T√¥i l√† chatbot h·ªó tr·ª£ c·ªßa b·∫°n. T√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n"
            "‚Ä¢ Tr·∫£ l·ªùi c√¢u h·ªèi\n"
            "‚Ä¢ T√¨m ki·∫øm th√¥ng tin\n"
            "‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n\n"
            "G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ b·∫Øt ƒë·∫ßu!"
        )
        logger.info(f"üìå Chat ID c·ªßa @{user.username} l√† {chat_id}")
        await update.message.reply_text(welcome_message)
        
    async def handle_help(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """X·ª≠ l√Ω l·ªánh /help t·ª´ ng∆∞·ªùi d√πng."""
        help_message = (
            "üÜò *H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng*\n\n"
            "‚Ä¢ G·ª≠i tin nh·∫Øn b·∫•t k·ª≥ ƒë·ªÉ nh·∫≠n c√¢u tr·∫£ l·ªùi\n"
            "‚Ä¢ S·ª≠ d·ª•ng @ ƒë·ªÉ nh·∫Øc ƒë·∫øn bot trong nh√≥m\n"
            "‚Ä¢ C√°c l·ªánh c√≥ s·∫µn:\n"
            "  /start - B·∫Øt ƒë·∫ßu s·ª≠ d·ª•ng bot\n"
            "  /help - Xem h∆∞·ªõng d·∫´n\n\n"
            "üìå M·ªçi th·∫Øc m·∫Øc vui l√≤ng li√™n h·ªá qu·∫£n tr·ªã vi√™n."
        )
        await update.message.reply_text(help_message, parse_mode='Markdown')
    
    async def handle_message(
        self, 
        update: Update, 
        context: ContextTypes.DEFAULT_TYPE
    ) -> None:
        """
        X·ª≠ l√Ω tin nh·∫Øn vƒÉn b·∫£n ƒë·∫øn t·ª´ ng∆∞·ªùi d√πng.
        
        Args:
            update: ƒê·ªëi t∆∞·ª£ng c·∫≠p nh·∫≠t t·ª´ Telegram
            context: ƒê·ªëi t∆∞·ª£ng ng·ªØ c·∫£nh t·ª´ Telegram
        """
        logger.info("üîÑ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω tin nh·∫Øn m·ªõi")
        
        if not update.message or not update.message.text:
            logger.warning("‚ö†Ô∏è Tin nh·∫Øn kh√¥ng h·ª£p l·ªá: thi·∫øu n·ªôi dung")
            return
            
        try:
            user = update.effective_user
            message = update.message.text.strip()
            logger.debug(f"üîç ƒê√£ tr√≠ch xu·∫•t th√¥ng tin t·ª´ tin nh·∫Øn - User ID: {user.id}, T√™n: {user.username}")
            
            # Kh·ªüi t·∫°o phi√™n ng∆∞·ªùi d√πng n·∫øu ch∆∞a t·ªìn t·∫°i
            if user.id not in self.user_sessions:
                logger.info(f"üë§ T·∫°o phi√™n m·ªõi cho ng∆∞·ªùi d√πng: {user.username} (ID: {user.id})")
                self.user_sessions[user.id] = {
                    'history': [],
                    'username': user.username,
                    'first_name': user.first_name,
                    'last_name': user.last_name
                }
            else:
                logger.debug(f"üîÑ Ti·∫øp t·ª•c phi√™n hi·ªán c√≥ cho ng∆∞·ªùi d√πng: {user.username}")
            
            logger.info(
                f"üì© ƒê√£ nh·∫≠n tin nh·∫Øn t·ª´ @{user.username} (ID: {user.id}): "
                f"\n---\n{message[:200]}{'...' if len(message) > 200 else ''}"
            )
            
            # X·ª≠ l√Ω tin nh·∫Øn th√¥ng qua lu·ªìng x·ª≠ l√Ω
            logger.debug("‚è≥ ƒêang x·ª≠ l√Ω tin nh·∫Øn th√¥ng qua lu·ªìng x·ª≠ l√Ω ch√≠nh...")
            response = await process_message_flow(
                message=message,
                user_id=str(user.id),  # Convert to string to match expected type
                session_id=str(user.id)  # Using user ID as session ID for tracking
            )
            
            # G·ª≠i ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng
            logger.debug(f"üì§ ƒêang g·ª≠i ph·∫£n h·ªìi cho @{user.username}")
            
            # -------------------------
            # G·ª≠i ph·∫£n h·ªìi cho ng∆∞·ªùi d√πng
            # -------------------------
            response_text = None
            chart_base64 = None

            if isinstance(response, dict):
                response_text = response.get('text') or response.get('content')
                chart_base64 = response.get('chart_base64')
            else:
                response_text = str(response)

            if not response_text:
                response_text = "Xin l·ªói, t√¥i kh√¥ng th·ªÉ t·∫°o ph·∫£n h·ªìi ph√π h·ª£p v√†o l√∫c n√†y."

            # G·ª≠i text tr∆∞·ªõc
            await update.message.reply_text(response_text)

            # N·∫øu c√≥ ·∫£nh (base64 chart) th√¨ g·ª≠i th√™m
            if chart_base64:
                import base64, io
                from telegram import InputFile
                
                # N·∫øu c√≥ prefix "data:image/png;base64,", th√¨ b·ªè ƒëi
                if chart_base64.startswith("data:image"):
                    chart_base64 = chart_base64.split(",")[1]

                img_bytes = base64.b64decode(chart_base64)
                bio = io.BytesIO(img_bytes)
                bio.name = "chart.png"
                await context.bot.send_photo(chat_id=update.effective_chat.id, photo=InputFile(bio))
            
            logger.info(f"‚úÖ ƒê√£ g·ª≠i th√†nh c√¥ng ph·∫£n h·ªìi cho @{user.username}")
            logger.debug(f"üìä S·ªë l∆∞·ª£ng phi√™n ƒëang ho·∫°t ƒë·ªông: {len(self.user_sessions)}")
            
        except Exception as e:
            error_message = str(e)
            error_lower = error_message.lower()
            
            # Extract user info safely
            user_id = getattr(update.effective_user, 'id', 'unknown')
            username = getattr(update.effective_user, 'username', 'unknown')
            
            # List of possible chat not found/blocked error messages (case-insensitive)
            chat_errors = [
                # Chat not found variations
                "chat not found", 
                "chat_not_found", 
                "no chat found",
                "Chat not found",
                "CHAT NOT FOUND",
                "chat not found",  # Original case
                "Chat not found",  # First letter capitalized
                "CHAT NOT FOUND",  # All caps
                
                # Bot blocked by user errors
                "bot was blocked by the user",
                "bot can't initiate conversation with a user",
                "bot was kicked",
                "bot is not a member",
                "bot is not a member of the supergroup chat",
                "bot can't send messages to this chat",
                "bot was kicked from the group chat",
                "bot was kicked from this group",
                "bot is not a member of the channel chat",
                "bot is not a member of the supergroup",
                "bot is not a member of this chat",
                "bot is not a member of the group chat",
                "bot was blocked by the user",
                "bot can't send messages to bots",
                "bot can't send messages to this user",
                "bot was blocked by the user",
                
                # Additional error patterns
                "peer id invalid",
                "chat not exist",
                "chat doesn't exist",
                "chat does not exist",
                "chat is deactivated",
                "chat is inactive",
                "user is deactivated",
                "user is inactive",
                "user not found",
                "user not exist",
                "user doesn't exist",
                "user does not exist",
                "group chat was deactivated",
                "supergroup chat was deactivated",
                "channel chat was deactivated"
            ]
            
            # Check if the error is a chat not found/blocked error
            is_chat_error = any(err in error_lower for err in [e.lower() for e in chat_errors])
            
            if is_chat_error:
                # Determine the specific type of chat error
                error_type = "blocked" if any(blocked in error_lower for blocked in [
                    "blocked", "kicked", "not a member", "can't send messages"
                ]) else "not found"
                
                logger.warning(
                    f"‚ö†Ô∏è Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn: Chat {error_type}. "
                    f"User ID: {user_id}, Username: @{username}, "
                    f"Error: {error_message}"
                )
                
                # Clean up the session if it exists
                if user_id != 'unknown' and user_id in self.user_sessions:
                    del self.user_sessions[user_id]
                    logger.info(f"üßπ ƒê√£ x√≥a phi√™n cho ng∆∞·ªùi d√πng ID: {user_id} (L√Ω do: chat {error_type})")
                return
                
            # Log other errors
            logger.critical(
                f"‚ùå L·ªñI NGHI√äM TR·ªåNG khi x·ª≠ l√Ω tin nh·∫Øn t·ª´ @{username} (ID: {user_id}): {error_message}", 
                exc_info=True
            )
                
            try:
                # Only try to send error message if we have a valid message object
                if update and update.message:
                    logger.warning("üîÑ ƒêang th·ª≠ g·ª≠i th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng...")
                    await update.message.reply_text(
                        "‚ùå ƒê√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n. Vui l√≤ng th·ª≠ l·∫°i sau."
                    )
                    logger.info("‚úÖ ƒê√£ g·ª≠i th√¥ng b√°o l·ªói cho ng∆∞·ªùi d√πng")
            except Exception as send_error:
                logger.error(f"‚ùå KH√îNG TH·ªÇ g·ª≠i th√¥ng b√°o l·ªói: {send_error}", exc_info=True)
                
                # If we can't send messages, clean up the session
                if "chat not found" in str(send_error).lower() and update.effective_user:
                    if update.effective_user.id in self.user_sessions:
                        del self.user_sessions[update.effective_user.id]
                        logger.info(f"üßπ ƒê√£ x√≥a phi√™n cho ng∆∞·ªùi d√πng ID: {update.effective_user.id} (kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn)")
            
            logger.info("üîÑ K·∫øt th√∫c x·ª≠ l√Ω tin nh·∫Øn v·ªõi l·ªói")
