"""
Lu·ªìng x·ª≠ l√Ω t∆∞∆°ng t√°c chat ch√≠nh c·ªßa ·ª©ng d·ª•ng.
X·ª≠ l√Ω tin nh·∫Øn ng∆∞·ªùi d√πng, ph√¢n t√≠ch √Ω ƒë·ªãnh v√† t·∫°o ph·∫£n h·ªìi ph√π h·ª£p.
"""

from dataclasses import dataclass
from typing import Dict, Any, Optional
from prefect import flow, get_run_logger
from tasks import phan_tich_y_dinh, tao_phat_bieu, thuc_thi_cong_cu, truy_van_du_lieu

@dataclass
class PhanHoi:
    """
    L·ªõp ƒë√≥ng g√≥i ph·∫£n h·ªìi t·ª´ chatbot
    
    Thu·ªôc t√≠nh:
        noi_dung: N·ªôi dung ph·∫£n h·ªìi
        thanh_cong: Tr·∫°ng th√°i x·ª≠ l√Ω (True/False)
        metadata: Th√¥ng tin b·ªï sung (t√πy ch·ªçn)
    """
    noi_dung: str
    thanh_cong: bool = True
    metadata: Optional[Dict[str, Any]] = None

@flow(name="luong-chat")
async def chat_flow(cau_hoi: str, session_id: Optional[str] = None) -> PhanHoi:
    """
    Lu·ªìng x·ª≠ l√Ω ch√≠nh cho m·ªói tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
    
    Quy tr√¨nh:
    1. Ph√¢n t√≠ch √Ω ƒë·ªãnh ng∆∞·ªùi d√πng
    2. Th·ª±c thi c√¥ng c·ª• ho·∫∑c t√¨m ki·∫øm th√¥ng tin
    3. T·∫°o ph·∫£n h·ªìi ph√π h·ª£p
    
    Args:
        cau_hoi: N·ªôi dung c√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng
        session_id: ID phi√™n l√†m vi·ªác (n·∫øu c√≥)
        
    Returns:
        PhanHoi: ƒê·ªëi t∆∞·ª£ng ch·ª©a ph·∫£n h·ªìi v√† metadata
    """
    logger = get_run_logger()
    logger.info(f"üü¢ B·∫Øt ƒë·∫ßu x·ª≠ l√Ω c√¢u h·ªèi: {cau_hoi[:50]}...")
    
    try:
        # B∆∞·ªõc 1: Ph√¢n t√≠ch √Ω ƒë·ªãnh
        logger.info("üîç Ph√¢n t√≠ch √Ω ƒë·ªãnh ng∆∞·ªùi d√πng...")
        y_dinh = await phan_tich_y_dinh(cau_hoi)
        logger.info(f"‚úÖ √ù ƒë·ªãnh ƒë√£ x√°c ƒë·ªãnh: {y_dinh}")
        
        # B∆∞·ªõc 2: X·ª≠ l√Ω d·ª±a tr√™n √Ω ƒë·ªãnh
        if y_dinh == "truy_van_du_lieu":
            logger.info("üîé Truy v·∫•n c∆° s·ªü d·ªØ li·ªáu...")
            du_lieu = await truy_van_du_lieu(cau_hoi)
            context = "\n".join(du_lieu) if du_lieu else ""
            phan_hoi_cong_cu = ""
        else:
            logger.info(f"‚öôÔ∏è ƒêang th·ª±c thi c√¥ng c·ª•: {y_dinh}")
            phan_hoi_cong_cu = await thuc_thi_cong_cu(y_dinh, {"truy_van": cau_hoi})
            context = ""
        
        # B∆∞·ªõc 3: T·∫°o ph·∫£n h·ªìi
        logger.info("üí≠ T·∫°o ph·∫£n h·ªìi...")
        phan_hoi = await tao_phat_bieu(
            cau_hoi=cau_hoi,
            nguyen_canh=context,
            phan_hoi_cong_cu=phan_hoi_cong_cu
        )
        
        logger.info("‚úÖ X·ª≠ l√Ω ho√†n t·∫•t")
        return PhanHoi(
            noi_dung=phan_hoi,
            metadata={
                "y_dinh": y_dinh,
                "su_dung_nguyen_canh": bool(context),
                "session_id": session_id
            }
        )
        
    except Exception as e:
        loi = str(e)
        logger.error(f"‚ùå L·ªói: {loi}")
        return PhanHoi(
            noi_dung=f"Xin l·ªói, t√¥i g·∫∑p l·ªói: {loi}",
            thanh_cong=False,
            metadata={"loi": loi, "session_id": session_id}
        )

# Ch·∫°y th·ª≠
if __name__ == "__main__":
    import asyncio
    
    async def chay_thu():
        """Ch·∫°y th·ª≠ lu·ªìng chat v·ªõi c√¢u h·ªèi m·∫´u"""
        mau_cau_hoi = [
            "Th·ªùi ti·∫øt h√¥m nay th·∫ø n√†o?",
            "1 + 1 b·∫±ng m·∫•y?",
            "T·ª∑ gi√° USD h√¥m nay"
        ]
        
        for cau_hoi in mau_cau_hoi:
            print(f"\nüë§ H·ªèi: {cau_hoi}")
            ket_qua = await chat_flow(cau_hoi)
            print(f"ü§ñ ƒê√°p: {ket_qua.noi_dung}")
    
    asyncio.run(chay_thu())
