"""
Lu·ªìng x·ª≠ l√Ω t√¨m ki·∫øm v√† t·∫°o ph·∫£n h·ªìi b·∫±ng RAG (Retrieval-Augmented Generation).
K·∫øt h·ª£p t√¨m ki·∫øm th√¥ng tin v√† t·∫°o ph·∫£n h·ªìi t·ª± ƒë·ªông.
"""

from dataclasses import dataclass
from datetime import datetime
from typing import List, Dict, Any, Optional
from prefect import flow, get_run_logger
from tasks import truy_van_du_lieu, tao_phat_bieu

@dataclass
class PhanHoiRAG:
    """L·ªõp ƒë√≥ng g√≥i ph·∫£n h·ªìi t·ª´ RAG"""
    noi_dung: str
    so_luong_nguon: int = 0
    top_k: int = 3
    session_id: Optional[str] = None
    metadata: Dict[str, Any] = None

@flow(name="luong-rag")
async def rag_flow(cau_hoi: str, top_k: int = 3, session_id: str = None) -> PhanHoiRAG:
    """
    X·ª≠ l√Ω c√¢u h·ªèi b·∫±ng k·ªπ thu·∫≠t RAG
    
    Quy tr√¨nh:
    1. T√¨m ki·∫øm t√†i li·ªáu li√™n quan
    2. T·ªïng h·ª£p th√¥ng tin v√† t·∫°o ph·∫£n h·ªìi
    
    Args:
        cau_hoi: C√¢u h·ªèi c·∫ßn t√¨m ki·∫øm
        top_k: S·ªë l∆∞·ª£ng t√†i li·ªáu c·∫ßn l·∫•y
        session_id: ID phi√™n l√†m vi·ªác (n·∫øu c√≥)
        
    Returns:
        PhanHoiRAG: ƒê·ªëi t∆∞·ª£ng ch·ª©a ph·∫£n h·ªìi v√† th√¥ng tin li√™n quan
    """
    logger = get_run_logger()
    logger.info(f"üîç B·∫Øt ƒë·∫ßu x·ª≠ l√Ω RAG cho c√¢u h·ªèi: {cau_hoi[:50]}...")
    
    try:
        # B∆∞·ªõc 1: T√¨m ki·∫øm t√†i li·ªáu li√™n quan
        logger.info(f"üîé ƒêang t√¨m ki·∫øm {top_k} t√†i li·ªáu li√™n quan...")
        tai_lieu = await truy_van_du_lieu(cau_hoi, top_k)
        
        # B∆∞·ªõc 2: T·∫°o ph·∫£n h·ªìi d·ª±a tr√™n ng·ªØ c·∫£nh
        if tai_lieu:
            context = "\n".join(tai_lieu)
            logger.info(f"‚úÖ T√¨m th·∫•y {len(tai_lieu)} t√†i li·ªáu li√™n quan")
            
            phan_hoi = await tao_phat_bieu(
                cau_hoi=cau_hoi,
                nguyen_canh=context,
                phan_hoi_cong_cu=""
            )
            
            return PhanHoiRAG(
                noi_dung=phan_hoi,
                so_luong_nguon=len(tai_lieu),
                top_k=top_k,
                session_id=session_id,
                metadata={
                    "ngay_xu_ly": datetime.now().isoformat(),
                    "loai_phuong_thuc": "rag"
                }
            )
        else:
            logger.warning("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y t√†i li·ªáu li√™n quan")
            return PhanHoiRAG(
                noi_dung="Xin l·ªói, t√¥i kh√¥ng t√¨m th·∫•y th√¥ng tin li√™n quan.",
                so_luong_nguon=0,
                top_k=top_k,
                session_id=session_id,
                metadata={"loi": "Kh√¥ng c√≥ d·ªØ li·ªáu ph√π h·ª£p"}
            )
            
    except Exception as e:
        loi = str(e)
        logger.error(f"‚ùå L·ªói khi x·ª≠ l√Ω RAG: {loi}")
        return PhanHoiRAG(
            noi_dung="Xin l·ªói, ƒë√£ x·∫£y ra l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu.",
            so_luong_nguon=0,
            session_id=session_id,
            metadata={"loi": loi}
        )

# Ch·∫°y th·ª≠
if __name__ == "__main__":
    import asyncio
    
    async def chay_thu_rag():
        """Ch·∫°y th·ª≠ lu·ªìng RAG v·ªõi c√¢u h·ªèi m·∫´u"""
        mau_cau_hoi = [
            "Chatbot l√† g√¨?",
            "C√°ch s·ª≠ d·ª•ng Prefect?",
            "Gi·ªõi thi·ªáu v·ªÅ LangChain"
        ]
        
        for cau_hoi in mau_cau_hoi:
            print(f"\nüîç H·ªèi: {cau_hoi}")
            ket_qua = await rag_flow(cau_hoi, top_k=2)
            print(f"üìö S·ªë ngu·ªìn: {ket_qua.so_luong_nguon}")
            print(f"ü§ñ Tr·∫£ l·ªùi: {ket_qua.noi_dung[:200]}...")
    
    asyncio.run(chay_thu_rag())
