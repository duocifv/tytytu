# canny_generator_resized.py

import cv2
from pathlib import Path
from PIL import Image

# Th∆∞ m·ª•c ch·ª©a ·∫£nh g·ªëc
input_dir = Path("images_original")
# Th∆∞ m·ª•c l∆∞u ·∫£nh Canny
output_dir = Path("images_canny")
output_dir.mkdir(exist_ok=True)

# K√≠ch th∆∞·ªõc chu·∫©n cho ControlNet
target_size = (512, 512)

# C√°c th√¥ng s·ªë Canny
threshold1 = 100
threshold2 = 200

# Duy·ªát t·∫•t c·∫£ file ·∫£nh ph·ªï bi·∫øn
for ext in ("*.jpg", "*.jpeg", "*.png"):
    for img_path in input_dir.glob(ext):
        # ƒê·ªçc ·∫£nh g·ªëc grayscale
        img = cv2.imread(str(img_path), cv2.IMREAD_GRAYSCALE)
        if img is None:
            print(f"‚ö†Ô∏è Kh√¥ng ƒë·ªçc ƒë∆∞·ª£c ·∫£nh {img_path.name}")
            continue-

        # Resize v·ªÅ target_size
        img = cv2.resize(img, target_size)

        # √Åp d·ª•ng Canny
        edges = cv2.Canny(img, threshold1, threshold2)

        # Chuy·ªÉn sang PIL Image (RGB) ƒë·ªÉ l∆∞u
        canny_img = Image.fromarray(edges).convert("RGB")
        canny_img.save(output_dir / img_path.name)
        print(f"‚úÖ ƒê√£ t·∫°o ·∫£nh Canny: {img_path.name}")

print("üéâ Ho√†n t·∫•t t·∫•t c·∫£ ·∫£nh!")
