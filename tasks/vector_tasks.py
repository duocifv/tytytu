"""
C√°c t√°c v·ª• l√†m vi·ªác v·ªõi c∆° s·ªü d·ªØ li·ªáu vector.
S·ª≠ d·ª•ng ChromaDB ƒë·ªÉ l∆∞u tr·ªØ v√† t√¨m ki·∫øm vƒÉn b·∫£n d·∫°ng vector.
"""

from prefect import task, get_run_logger
from typing import List, Optional, Dict, Any
import chromadb

# Kh·ªüi t·∫°o client ChromaDB (l∆∞u DB t·∫°i ./chroma_db)
chroma_client = chromadb.PersistentClient(path="./chroma_db")


@task(name="truy-van-du-lieu")
async def truy_van_du_lieu(cau_hoi: str, top_k: int = 3) -> List[str]:
    """
    T√¨m ki·∫øm t√†i li·ªáu li√™n quan t·ª´ c∆° s·ªü d·ªØ li·ªáu vector.
    """
    logger = get_run_logger()
    try:
        logger.info(f"üîç ƒêang t√¨m ki·∫øm {top_k} t√†i li·ªáu li√™n quan...")

        # L·∫•y collection (t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i)
        collection = chroma_client.get_or_create_collection(name="knowledge_base")

        # T√¨m ki·∫øm t√†i li·ªáu t∆∞∆°ng ƒë·ªìng
        results = collection.query(
            query_texts=[cau_hoi],
            n_results=top_k
        )

        # Tr√≠ch xu·∫•t n·ªôi dung t·ª´ k·∫øt qu·∫£
        documents = results.get("documents", [[]])[0]
        logger.info(f"‚úÖ T√¨m th·∫•y {len(documents)} t√†i li·ªáu li√™n quan")

        return documents

    except Exception as e:
        logger.error(f"‚ùå L·ªói khi truy v·∫•n d·ªØ li·ªáu: {str(e)}")
        return []


@task(name="luu-tai-lieu")
def luu_tai_lieu(van_ban: str, metadata: Optional[Dict[str, Any]] = None) -> bool:
    """
    L∆∞u tr·ªØ t√†i li·ªáu v√†o c∆° s·ªü d·ªØ li·ªáu vector.
    """
    logger = get_run_logger()
    try:
        logger.info("üíæ ƒêang l∆∞u t√†i li·ªáu m·ªõi...")

        # L·∫•y collection (t·∫°o m·ªõi n·∫øu ch∆∞a t·ªìn t·∫°i)
        collection = chroma_client.get_or_create_collection(name="knowledge_base")

        # Sinh ID m·ªõi an to√†n (d·ª±a tr√™n t·ªïng s·ªë ID ƒëang c√≥)
        existing = collection.get()
        next_id = f"doc_{len(existing.get('ids', [])) + 1}"

        # L∆∞u t√†i li·ªáu
        collection.upsert(
            documents=[van_ban],
            metadatas=[metadata or {}],
            ids=[next_id]
        )

        logger.info(f"‚úÖ ƒê√£ l∆∞u t√†i li·ªáu v·ªõi ID: {next_id}")
        return True

    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l∆∞u t√†i li·ªáu: {str(e)}")
        return False
