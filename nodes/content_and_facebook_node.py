# main_pipeline.py
import os
import uuid
import traceback
import requests
from pydantic import BaseModel
from langchain_core.messages import HumanMessage
from langchain.output_parsers import PydanticOutputParser
from brain.notion_logger import get_hexagram_log
from services.llm_service import llm
from services.facebook_service import FacebookPipeline
from services.poster_service import generate_poster
from PIL import Image as PILImage
from io import BytesIO

# Th∆∞ m·ª•c l∆∞u ·∫£nh t·∫°m
TEMP_DIR = "generated_images"
os.makedirs(TEMP_DIR, exist_ok=True)

# -----------------------------
# 1Ô∏è‚É£ Model JSON chu·∫©n v·ªõi 3 tr∆∞·ªùng
# -----------------------------
class ContentOutput(BaseModel):
    caption: str
    short_post: str
    image_prompt: str
    daily_stoic: str
    author: str
    tone: str

def safe_parse(parser, text: str):
    try:
        return parser.parse(text)
    except Exception:
        traceback.print_exc()
        return ContentOutput(
            caption="Fallback caption",
            short_post="Fallback short post",
            image_prompt="Fallback prompt",
            daily_stoic="Fallback stoic",
            tone="neutral"
        )

def extract_simple_notion(notion_raw: dict, keys=None):
    """R√∫t g·ªçn d·ªØ li·ªáu t·ª´ Notion"""
    if keys is None:
        keys = ["Summary", "Health", "Work", "Nhan", "Effect", "Trend",
                "Thien", "Dia", "Finance", "Psychology", "KeyEvent"]
    simple = {}
    try:
        results = notion_raw.get("results", [])
        if not results:
            return simple
        page = results[0]
        props = page.get("properties", {})
        for k in keys:
            v = props.get(k)
            if not v:
                continue
            rich_text = v.get("rich_text", [])
            if rich_text and isinstance(rich_text, list):
                simple[k] = " ".join(rt.get("plain_text", "") for rt in rich_text).strip()
    except Exception:
        traceback.print_exc()
    return simple

# -----------------------------
# 2Ô∏è‚É£ T·∫°o ·∫£nh t·ª´ Hugging Face Space
# -----------------------------
def generate_image_from_prompt(prompt: str) -> str | None:
    """
    G·ª≠i prompt t·ªõi endpoint Hugging Face Space v√† l∆∞u ·∫£nh v·ªÅ TEMP_DIR.
    Tr·∫£ v·ªÅ ƒë∆∞·ªùng d·∫´n file ho·∫∑c None n·∫øu l·ªói.
    """
    url = "https://duocifv-tytytu-image.hf.space/generate-image"
    payload = {"prompt": prompt}
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(url, json=payload, headers=headers, timeout=2000)
        response.raise_for_status()
        img = PILImage.open(BytesIO(response.content)).convert("RGB")
        print("‚úÖ Image generated successfully")
        return img
    except Exception as e:
        print("‚ùå L·ªói t·∫°o ·∫£nh:", e)
        return None


# -----------------------------
# 3Ô∏è‚É£ Pipeline ch√≠nh
# -----------------------------
def content_and_facebook_node(state: dict):
    msg_list = []
    fb_success = False

    # 1Ô∏è‚É£ L·∫•y d·ªØ li·ªáu Notion
    notion_raw = get_hexagram_log()
    notion_data = extract_simple_notion(notion_raw)
    print("‚úÖ D·ªØ li·ªáu r√∫t g·ªçn t·ª´ Notion:", notion_data)

    # 2Ô∏è‚É£ T·∫°o content t·ª´ LLM
    parser = PydanticOutputParser(pydantic_object=ContentOutput)
    prompt_text = f"""
        B·∫°n l√† bi√™n t·∫≠p vi√™n m·∫°ng x√£ h·ªôi, ng·∫Øn g·ªçn, ƒë·ªìng c·∫£m.
        D·ªØ li·ªáu JSON: {notion_data}

        Vi·∫øt 6 tr∆∞·ªùng JSON:
        - caption: n·ªôi dung ch√≠nh Facebook b·∫±ng ti·∫øng Vi·ªát
        - short_post: n·ªôi dung ng·∫Øn b·∫±ng ti·∫øng Vi·ªát, ‚â§280 k√Ω t·ª±
        - image_prompt: prompt b·∫±ng ti·∫øng Anh ƒë·ªÉ t·∫°o ·∫£nh, ng·∫Øn g·ªçn ‚â§77 k√Ω t·ª±
        - daily_stoic: m·ªôt c√¢u tr√≠ch d·∫´n ng·∫Øn, s√¢u s·∫Øc, truy·ªÅn c·∫£m h·ª©ng, d·ªãch ra ti·∫øng Vi·ªát.
        - author: t√™n t√°c gi·∫£ c·ªßa c√¢u tr√≠ch d·∫´n (v√≠ d·ª•: Marcus Aurelius, Seneca, Epictetus‚Ä¶)
        - tone: g·ª£i √Ω t√¥ng m√†u/thi·∫øt k·∫ø poster, ng·∫Øn g·ªçn. Ch·ªâ ch·ªçn trong danh s√°ch:
            ["happy", "sad", "neutral", "vibrant", "warm", "cool", "pastel", 
            "bold", "calm", "dark", "light", "luxury", "natural"]
        C√≥ th·ªÉ k·∫øt h·ª£p nhi·ªÅu tone (v√≠ d·ª•: "warm, serene" ‚Üí "warm, calm").
        N·∫øu tone n·∫±m ngo√†i danh s√°ch, h√£y √°nh x·∫° v·ªÅ g·∫ßn nh·∫•t.

        Kh√¥ng th√™m text ngo√†i JSON, ch·ªâ xu·∫•t JSON ƒë√∫ng ƒë·ªãnh d·∫°ng.
        {parser.get_format_instructions()}
    """

    llm_output = llm.invoke(prompt_text)
    raw_result = getattr(llm_output, "content", str(llm_output))
    content_obj = safe_parse(parser, raw_result)
    print("üìå Content JSON:", content_obj)

    poster = None
    temp_path = None

    # 3Ô∏è‚É£ T·∫°o ·∫£nh t·ª´ image_prompt
    if content_obj.image_prompt:
        pil_img = generate_image_from_prompt(content_obj.image_prompt)
        if pil_img:
            poster = generate_poster(
                pil_image=pil_img,
                text=content_obj.daily_stoic,
                author=content_obj.author,
                size=512,
                padding=38,
                font_size=30,
                line_spacing=4,
                brightness=0.6,
                saturation=1.4,
                gradient_alpha=38,
                tone=content_obj.tone,
            )
            msg_list.append(HumanMessage(content="‚úÖ Poster created"))
        else:
            msg_list.append(HumanMessage(content="‚ùå Image generation failed"))

    # 4Ô∏è‚É£ ƒêƒÉng Facebook n·∫øu c√≥ poster
    if poster:
        temp_path = os.path.join(TEMP_DIR, f"poster_{uuid.uuid4().hex}.png")
        poster.save(temp_path, format="PNG")
        try:
            pipeline = FacebookPipeline()
            fb_result = pipeline.run(
                caption=content_obj.caption,
                short_post=content_obj.short_post,
                image_path=temp_path
            )
            fb_success = fb_result.get("published", False)
            msg_list.append(HumanMessage(content=f"Facebook: {fb_result.get('message', '‚úÖ Done' if fb_success else '‚ùå Failed')}"))
        finally:
            if temp_path and os.path.exists(temp_path):
                os.remove(temp_path)

    return {
        "status": "done",
        "messages": msg_list,
        "published": fb_success,
    }
