# main_pipeline_with_two_tier.py
import os
import uuid
import traceback
import requests
from pydantic import BaseModel
from langchain_core.messages import HumanMessage
from langchain_core.prompts import ChatPromptTemplate
from langchain_core.runnables import RunnableLambda
from langchain.output_parsers import PydanticOutputParser
from brain.notion_logger import get_hexagram_log
from services.generate_video_service import generate_video
from services.llm_service import llm
from services.facebook_service import FacebookPipeline
from services.rag_service import RAGRetriever  # gi·∫£ ƒë·ªãnh c√≥ RAG
from PIL import Image as PILImage
from io import BytesIO

# -----------------------------
# Th∆∞ m·ª•c l∆∞u t·∫°m (·∫£nh + video)
# -----------------------------
TEMP_DIR = "generated_images"
os.makedirs(TEMP_DIR, exist_ok=True)

# -----------------------------
# 1Ô∏è‚É£ Model JSON chu·∫©n
# -----------------------------
class ContentOutput(BaseModel):
    fb_title: str
    fb_description: str
    image_prompt: str
    daily_stoic: str
    quote_author: str
    poster_tone: str

def safe_parse(parser, text: str):
    try:
        return parser.parse(text)
    except Exception:
        traceback.print_exc()
        return ContentOutput(
            fb_title="Fallback Title",
            fb_description="Fallback description",
            image_prompt="city street rainy",
            daily_stoic="Fallback stoic",
            quote_author="Unknown",
            poster_tone="neutral"
        )

def extract_simple_notion(notion_raw: dict, keys=None):
    """R√∫t g·ªçn d·ªØ li·ªáu t·ª´ Notion"""
    if keys is None:
        keys = ["Nhan", "Dia", "Thien", "Summary", "KeyEvent", "Health", "Work", "Effect", "Trend", "Finance", "Psychology", "Family", "Spiritual", "Community" ]
    simple = {}
    try:
        props = notion_raw.get("properties", {})
        for k in keys:
            v = props.get(k)
            if not v:
                continue
            rich_text = v.get("rich_text", [])
            if rich_text and isinstance(rich_text, list):
                simple[k] = " ".join(rt.get("plain_text", "") for rt in rich_text).strip()
    except Exception as e:
        print(e)
    return simple


# -----------------------------
# 2Ô∏è‚É£ T·∫°o ·∫£nh t·ª´ Hugging Face Space
# -----------------------------
def generate_image_from_prompt(prompt: str) -> PILImage.Image | None:
    url = "https://duocifv-tytytu-image.hf.space/generate-image"
    payload = {"prompt": prompt}
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(url, json=payload, headers=headers, timeout=2000)
        response.raise_for_status()
        img = PILImage.open(BytesIO(response.content)).convert("RGB")
        print("‚úÖ Image generated successfully")
        return img
    except Exception as e:
        print("‚ùå L·ªói t·∫°o ·∫£nh:", e)
        traceback.print_exc()
        return None

# -----------------------------
# Helper: ƒëƒÉng media l√™n Facebook
# -----------------------------
def post_media(pipeline: FacebookPipeline, video_path=None, image_path=None, fb_title="", fb_description=""):
    fb_title_safe = fb_title[:100]
    try:
        if video_path:
            fb_result = pipeline.post_video(
                video_path=video_path,
                title=fb_title_safe,
                description=fb_description
            )
            success = bool(fb_result.get("id"))
        elif image_path:
            fb_result = pipeline.run(
                image_path=image_path,
                title=fb_title,
                description=fb_description
            )
            success = bool(fb_result.get("published", False))
        else:
            success = False
    except Exception:
        traceback.print_exc()
        success = False
    return success

# -----------------------------
# 3Ô∏è‚É£ Pipeline ch√≠nh: Two-tier + RAG + Refine/Polish
# -----------------------------
def content_and_facebook_node(state: dict):
    msg_list = []
    fb_success = False
    temp_image_path = None
    temp_video_path = None

    # 1Ô∏è‚É£ L·∫•y d·ªØ li·ªáu Notion
    notion_raw = get_hexagram_log()
    notion_data = extract_simple_notion(notion_raw)
    print("‚úÖ D·ªØ li·ªáu r√∫t g·ªçn t·ª´ Notion:", notion_data)

    # ‚úÖ N·∫øu notion_data r·ªóng, ƒë·∫∑t m·∫∑c ƒë·ªãnh
    if not notion_data:
        notion_data = {"Summary": "Kh√¥ng c√≥ d·ªØ li·ªáu h√¥m nay"}

    notion_data_str = str(notion_data)
    parser = PydanticOutputParser(pydantic_object=ContentOutput)

    # -----------------------------
    # 2Ô∏è‚É£ Tier 1: Ph√¢n t√≠ch d·ªØ li·ªáu
    # -----------------------------
    p_analysis = ChatPromptTemplate.from_messages([
        ("system", "B·∫°n l√† chuy√™n gia ph√¢n t√≠ch d·ªØ li·ªáu c·ªông ƒë·ªìng."),
        ("user",
         "D·ªØ li·ªáu JSON t·ª´ Notion: {notion_data}\n"
         "H√£y ph√¢n t√≠ch v√† r√∫t ra c√°c insight ch√≠nh:\n"
         "- T√¨nh h√¨nh thi√™n tai, d·ªãch b·ªánh, kinh t·∫ø, t√¢m l√Ω\n"
         "- T√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe, c√¥ng vi·ªác, ƒë·ªùi s·ªëng gia ƒë√¨nh\n"
         "- G·ª£i √Ω c√°ch ·ª©ng ph√≥, chƒÉm s√≥c s·ª©c kh·ªèe v√† tinh th·∫ßn\n"
         "Tr·∫£ v·ªÅ vƒÉn b·∫£n s√∫c t√≠ch, d·ªÖ hi·ªÉu.")
    ]).partial(notion_data=notion_data_str)
    prompt_analysis = p_analysis.format(notion_data=notion_data_str)
    insight_text = getattr(llm.invoke(prompt_analysis), "content", "")

    # -----------------------------
    # 3Ô∏è‚É£ RAG: l·∫•y d·ªØ li·ªáu th·ª±c t·∫ø
    # -----------------------------
    rag = RAGRetriever(sources=["VNExpress", "Kh√≠ t∆∞·ª£ng Th·ªßy vƒÉn", "WHO"])
    rag_info = rag.retrieve(notion_data)
    if isinstance(rag_info, dict):
        rag_info = str(rag_info)

    # -----------------------------
    # 4Ô∏è‚É£ Tier 2: Vi·∫øt content d·ª±a tr√™n insight + RAG
    # -----------------------------
    parser_instructions = parser.get_format_instructions()
    p_content = ChatPromptTemplate.from_messages([
        ("system", "B·∫°n l√† bi√™n t·∫≠p vi√™n m·∫°ng x√£ h·ªôi, vi·∫øt status Facebook ƒë·ªùi th∆∞·ªùng, g·∫ßn g≈©i."),
        ("user",
        """
D·ª±a v√†o insight t·ª´ b∆∞·ªõc ph√¢n t√≠ch: {insight}
V√† d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ RAG: {rag_info}

H√£y vi·∫øt th√†nh m·ªôt status Facebook ƒë·ªùi th∆∞·ªùng, g·∫ßn g≈©i v√† h·ªØu √≠ch, nh∆∞ m·ªôt ng∆∞·ªùi b·∫°n ƒëang tr√≤ chuy·ªán v·ªõi c·ªông ƒë·ªìng.

Y√™u c·∫ßu:
- M·ªü ƒë·∫ßu: v·∫Ω m·ªôt h√¨nh ·∫£nh c·ª• th·ªÉ t·ª´ ƒë·ªùi s·ªëng (qu√°n c√† ph√™ v·∫Øng kh√°ch, tr·∫ª nh·ªè ho, xe ch·∫øt m√°y gi·ªØa m∆∞a‚Ä¶)
- Th√¢n b√†i:
+ ƒê·ªùi th∆∞·ªùng + tri th·ª©c: l·ªìng gh√©p ·∫£nh h∆∞·ªüng th·ª±c t·∫ø t·ª´ d·ªØ li·ªáu.
+ L·ªùi khuy√™n c·ª• th·ªÉ, d·ªÖ l√†m: chƒÉm s√≥c s·ª©c kho·∫ª, an to√†n, sinh ho·∫°t.
+ G√≥c c·ªông ƒë·ªìng: nh·∫Øc ƒë·∫øn s·ª± chia s·∫ª, gi√∫p ƒë·ª° nhau.
- K·∫øt: gi·ªçng vƒÉn ·∫•m √°p, d√≠ d·ªèm, nh·∫π nh√†ng nh∆∞ d·∫∑n d√≤ ng∆∞·ªùi th√¢n.
- Daily Stoic: th√™m m·ªôt c√¢u tri·∫øt l√Ω ng·∫Øn g·ªçn, truy·ªÅn nƒÉng l∆∞·ª£ng t√≠ch c·ª±c.
- ƒê·ªô d√†i: 150‚Äì250 t·ª´.
- Phong c√°ch: th√¢n m·∫≠t, g·ª£i c·∫£m x√∫c, c√¢n b·∫±ng gi·ªØa lo l·∫Øng v√† hy v·ªçng.
- C√≥ th·ªÉ th√™m 1 hashtag cu·ªëi.
- Kh√¥ng d√πng ng√¥n ng·ªØ h·ªçc thu·∫≠t, kh√¥ng li·ªát k√™ kh√¥ khan, kh√¥ng ch√®n d·ªØ li·ªáu k·ªπ thu·∫≠t.

ƒê·∫ßu ra: JSON v·ªõi 6 tr∆∞·ªùng:
- fb_title (50‚Äì100 k√Ω t·ª±)
- fb_description (‚â§500 k√Ω t·ª±)
- image_prompt (‚â§77 k√Ω t·ª±)
- daily_quote
- quote_author
- poster_tone (ch·ªçn t·ª´: ["happy","sad","neutral","vibrant","warm","cool","pastel","bold","calm","dark","light","luxury","natural"])

Ch·ªâ xu·∫•t **JSON ƒë√∫ng ƒë·ªãnh d·∫°ng**, kh√¥ng th√™m text n√†o kh√°c ngo√†i JSON.

{parser_instructions}
        """)
    ]).partial(parser_instructions=parser_instructions)

    prompt_content = p_content.format(insight=insight_text, rag_info=rag_info)
    llm_output = llm.invoke(prompt_content)
    content_obj = safe_parse(parser, getattr(llm_output, "content", str(llm_output)))

    # -----------------------------
    # 5Ô∏è‚É£ Refine / Polish
    # -----------------------------
    p_refine = ChatPromptTemplate.from_messages([
        ("system", "B·∫°n l√† chuy√™n gia ch·ªânh s·ª≠a vƒÉn b·∫£n."),
        ("user",
        "H√£y tinh ch·ªânh JSON sau ƒë·ªÉ status Facebook m∆∞·ª£t, t·ª± nhi√™n, th√™m ch√∫t d√≠ d·ªèm, "
        "gi·ªØ nguy√™n n·ªôi dung v√† c·∫£m x√∫c.\nJSON: {raw_json}")
    ]).partial(raw_json=content_obj.model_dump_json())

    prompt_refine_str = p_refine.format(raw_json=content_obj.model_dump_json())
    llm_refined = llm.invoke(prompt_refine_str)
    content_obj = safe_parse(parser, getattr(llm_refined, "content", str(llm_refined)))
    print("üìå Content JSON sau refine:", content_obj)

    # -----------------------------
    # 6Ô∏è‚É£ T·∫°o ·∫£nh + video
    # -----------------------------
    if content_obj.image_prompt:
        pil_img = generate_image_from_prompt(content_obj.image_prompt)
        if pil_img:
            temp_image_path = os.path.join(TEMP_DIR, f"v_{uuid.uuid4().hex[:4]}.jpg")
            try:
                pil_img.save(temp_image_path, format="JPEG", quality=95)
            except Exception:
                traceback.print_exc()
                temp_image_path = None

            if temp_image_path:
                temp_video_path = os.path.join(TEMP_DIR, f"v_{uuid.uuid4().hex[:4]}.mp4")
                try:
                    generate_video(
                        temp_image_path,
                        content_obj.daily_stoic or content_obj.fb_description,
                        content_obj.quote_author or None,
                        output=temp_video_path,
                        size=(720,900),
                        total_frames=240,
                        fps=30
                    )
                    if not os.path.exists(temp_video_path):
                        temp_video_path = None
                except Exception:
                    traceback.print_exc()
                    temp_video_path = None

            msg_list.append(HumanMessage(content="‚úÖ Video created" if temp_video_path else "‚ùå Video creation failed"))
        else:
            msg_list.append(HumanMessage(content="‚ùå Image generation failed"))

    # -----------------------------
    # 7Ô∏è‚É£ ƒêƒÉng Facebook
    # -----------------------------
    if temp_video_path or temp_image_path:
        pipeline = FacebookPipeline()
        fb_success = post_media(
            pipeline,
            video_path=temp_video_path,
            image_path=temp_image_path,
            fb_title=content_obj.fb_title,
            fb_description=content_obj.fb_description
        )
        msg_list.append(HumanMessage(content=f"Facebook: {'‚úÖ Published' if fb_success else '‚ùå Failed'}"))

    # -----------------------------
    # 8Ô∏è‚É£ Cleanup temp files
    # -----------------------------
    for path in [temp_image_path, temp_video_path]:
        try:
            if path and os.path.exists(path):
                os.remove(path)
        except Exception:
            traceback.print_exc()

    return {
        "status": "done",
        "messages": msg_list,
        "published": fb_success,
    }
