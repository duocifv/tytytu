# nodes/human_reference_node_multi.py
from langchain_core.messages import HumanMessage
from pydantic import BaseModel
from langchain.output_parsers import PydanticOutputParser
from services.groq_service import chat_groq
from typing import Dict, Any

# -----------------------------
# 1Ô∏è‚É£ Model JSON chu·∫©n cho output m·ªói chuy√™n gia
# -----------------------------
class ExpertOutput(BaseModel):
    health: str
    finance: str
    psychology: str
    work: str
    trend: str
    family: str
    spiritual: str
    community: str

# -----------------------------
# 2Ô∏è‚É£ ƒê·ªãnh nghƒ©a 8 chuy√™n gia v·ªõi t√™n v√† chuy√™n m√¥n
# -----------------------------
EXPERTS = [
    {"name": "Expert_Health", "field": "S·ª©c kh·ªèe", "key": "health"},
    {"name": "Expert_Finance", "field": "T√†i ch√≠nh", "key": "finance"},
    {"name": "Expert_Psychology", "field": "T√¢m l√Ω", "key": "psychology"},
    {"name": "Expert_Work", "field": "C√¥ng vi·ªác", "key": "work"},
    {"name": "Expert_Trend", "field": "Xu h∆∞·ªõng / Th·ªùi s·ª±", "key": "trend"},
    {"name": "Expert_Family", "field": "Gia ƒë√¨nh / Quan h·ªá", "key": "family"},
    {"name": "Expert_Spiritual", "field": "Tinh th·∫ßn / Tri·∫øt l√Ω", "key": "spiritual"},
    {"name": "Expert_Community", "field": "C·ªông ƒë·ªìng / X√£ h·ªôi", "key": "community"},
]

# -----------------------------
# 3Ô∏è‚É£ Node AI ƒëa chuy√™n gia (tr·∫£ v·ªÅ 1 JSON duy nh·∫•t)
# -----------------------------
def human_reference_node(state: Dict[str, Any]):
    record = state.get("daily", {})
    input_data = record.get("input", {})
    base_qua = record.get("base", {})
    transformed_qua = record.get("transformed", {})
    llm_summary = record.get("llm_summary", "")

    final_result = {
        "health": "",
        "finance": "",
        "psychology": "",
        "work": "",
        "trend": "",
        "family": "",
        "spiritual": "",
        "community": ""
    }

    for expert in EXPERTS:
        parser = PydanticOutputParser(pydantic_object=ExpertOutput)

        prompt = (
            f"B·∫°n l√† chuy√™n gia v·ªÅ lƒ©nh v·ª±c: {expert['field']}\n"
            f"D·ªØ li·ªáu ƒë·∫ßu v√†o:\n"
            f"- Thi√™n: {input_data.get('Thien','')}\n"
            f"- ƒê·ªãa: {input_data.get('Dia','')}\n"
            f"- Nh√¢n: {input_data.get('Nhan','')}\n"
            f"- S·ª± ki·ªán n·ªïi b·∫≠t: {input_data.get('KeyEvent','')}\n"
            f"- T√≥m t·∫Øt LLM: {llm_summary}\n"
            f"- Qu·∫ª g·ªëc: {base_qua.get('name','')}, bitstring: {base_qua.get('bitstring','')}\n"
            f"- Qu·∫ª bi·∫øn: {transformed_qua.get('name','')}, bitstring: {transformed_qua.get('bitstring','')}\n"
            f"- Quan h·ªá qu·∫ª: Opposite, Transform, Ally, Support\n\n"
            f"H√£y ph√¢n t√≠ch chuy√™n s√¢u lƒ©nh v·ª±c c·ªßa b·∫°n v√† tr·∫£ v·ªÅ JSON ƒë√∫ng format:\n{parser.get_format_instructions()}"
        )

        raw_result = chat_groq(prompt)

        try:
            result = parser.parse(raw_result)
        except Exception:
            result = ExpertOutput(
                health="Fallback",
                finance="Fallback",
                psychology="Fallback",
                work="Fallback",
                trend="Fallback",
                family="Fallback",
                spiritual="Fallback",
                community="Fallback"
            )

        # G√°n n·ªôi dung chuy√™n m√¥n ch√≠nh v√†o JSON cu·ªëi c√πng
        key = expert["key"]
        final_result[key] = getattr(result, key)

    print("üìå 3 - human_reference_node_multi - ok", final_result)
    msg = HumanMessage(content="human_reference_node_multi completed")

    return {
        "status": "done",
        "messages": [msg],
        "daily": final_result  # JSON duy nh·∫•t 8 key
    }
