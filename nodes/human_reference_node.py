# nodes/human_reference_node.py
from langchain_core.messages import HumanMessage
from pydantic import BaseModel
from langchain.output_parsers import PydanticOutputParser
from services.groq_service import chat_groq  # Ho·∫∑c openai.ChatCompletion n·∫øu d√πng GPT-4
from typing import Dict, Any, List

# -----------------------------
# 1Ô∏è‚É£ Model JSON chu·∫©n cho output
# -----------------------------
class HumanReferenceOutput(BaseModel):
    health: str
    finance: str
    psychology: str
    work: str
    trend: str
    note: str

# -----------------------------
# 2Ô∏è‚É£ Node AI tham chi·∫øu qu·∫ª
# -----------------------------
def human_reference_node(state):

    record = state.get("daily", {})

    # Nh√∫ng d·ªØ li·ªáu ƒë·∫ßu v√†o
    input_data = record.get("input", {})
    base_qua = record.get("base", {})
    transformed_qua = record.get("transformed", {})
    llm_summary = record.get("llm_summary", "")

    parser = PydanticOutputParser(pydantic_object=HumanReferenceOutput)
    
    # Prompt t·ªëi gi·∫£n
    prompt = (
        f"D·ªØ li·ªáu ƒë·∫ßu v√†o:\n"
        f"- Thi√™n: {input_data.get('Thien','')}\n"
        f"- ƒê·ªãa: {input_data.get('Dia','')}\n"
        f"- Nh√¢n: {input_data.get('Nhan','')}\n"
        f"- S·ª± ki·ªán n·ªïi b·∫≠t: {input_data.get('KeyEvent','')}\n"
        f"- T√≥m t·∫Øt LLM: {llm_summary}\n"
        f"- Qu·∫ª g·ªëc: {base_qua.get('name','')}, bitstring: {base_qua.get('bitstring','')}\n"
        f"- Qu·∫ª bi·∫øn: {transformed_qua.get('name','')}, bitstring: {transformed_qua.get('bitstring','')}\n"
        f"- Quan h·ªá qu·∫ª: Opposite, Transform, Ally, Support\n\n"
        "H√£y ph√¢n t√≠ch:\n"
        "1. D·ªãch qu·∫ª sang 4 lƒ©nh v·ª±c ƒë·ªùi s·ªëng con ng∆∞·ªùi: S·ª©c kh·ªèe, T√†i ch√≠nh, T√¢m l√Ω, C√¥ng vi·ªác.\n"
        "2. Ph√¢n t√≠ch t√°c ƒë·ªông gi√°n ti·∫øp v√† xu h∆∞·ªõng theo t·ª´ng lƒ©nh v·ª±c.\n"
        "3. Li√™n k·∫øt ƒë·∫∑c t√≠nh bi·∫øn h√≥a qu·∫ª (Opposite, Transform, Ally, Support) ƒë·ªÉ d·ª± ƒëo√°n tr·∫°ng th√°i v·∫°n v·∫≠t.\n\n"
        f"Tr·∫£ v·ªÅ JSON ƒë√∫ng format:\n{parser.get_format_instructions()}"
    )

    # G·ªçi AI (Groq GPT ho·∫∑c OpenAI GPT)
    raw_result = chat_groq(prompt)  # Ho·∫∑c openai_call(prompt)

    # Parse an to√†n
    try:
        result = parser.parse(raw_result)
    except Exception:
        result = HumanReferenceOutput(
            health="Fallback",
            finance="Fallback",
            psychology="Fallback",
            work="Fallback",
            trend="Fallback",
            note="AI tr·∫£ v·ªÅ kh√¥ng ƒë√∫ng JSON"
        )
    print("üìå 3 - human_reference_node - ok")
    msg = HumanMessage(content="human_reference_node completed")
    return {
        "status": "done",
        "messages": [msg],  
        "daily": result
    }
