# nodes/title_node.py
from langchain_core.messages import HumanMessage
from pydantic import BaseModel
from langchain.output_parsers import PydanticOutputParser
from services.groq_service import chat_groq  # h√†m g·ªçi Groq GPT-OSS-120B

# -----------------------------
# 1Ô∏è‚É£ Model chu·∫©n ƒë·ªÉ parse JSON
# -----------------------------
class TitleOutput(BaseModel):
    text: str
    description: str

# -----------------------------
# 2Ô∏è‚É£ Node t·∫°o title & meta description
# -----------------------------
def title_node(state):
    topic = state.get("topic", "Demo")
    outputs = state.get("outputs", {})
    ideas = outputs.get("ideas", []) if isinstance(outputs, dict) else []

    parser = PydanticOutputParser(pydantic_object=TitleOutput)

    # T·ªëi gi·∫£n prompt, nh√∫ng state nh∆∞ng ·∫©n messages
    safe_state = {k: ("..." if k == "messages" else v) for k, v in state.items()}
    prompt = (
        f"D·ªØ li·ªáu state: {safe_state}\n\n"
        f"Ch·ªß ƒë·ªÅ: {topic}\n"
        f"√ù t∆∞·ªüng tham kh·∫£o: {', '.join(ideas) if ideas else 'Kh√¥ng c√≥'}\n\n"
        "H√£y t·∫°o m·ªôt ti√™u ƒë·ªÅ blog ng·∫Øn g·ªçn, thu h√∫t (‚â§ 60 k√Ω t·ª±) "
        "v√† m·ªôt meta description chu·∫©n SEO (‚â§ 160 k√Ω t·ª±).\n"
        f"Tr·∫£ v·ªÅ ƒë√∫ng JSON theo format:\n{parser.get_format_instructions()}"
    )

    # G·ªçi Groq, lu√¥n tr·∫£ v·ªÅ string
    raw_result = chat_groq(prompt)
    print("üìå raw_result from Groq:", raw_result)

    try:
        result = parser.parse(raw_result)
    except Exception as e:
        result = TitleOutput(
            text="Fallback Title",
            description=f"L·ªói parse JSON: {e}"
        )

    msg = HumanMessage(content=f"title_node blog cho ch·ªß ƒë·ªÅ '{topic}'")
    return {
        "status": "done",
        "messages": [msg],
        "outputs": result
    }
